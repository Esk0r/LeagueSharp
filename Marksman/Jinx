#region

using System;
using System.Drawing;
using System.Linq;
using LeagueSharp;
using LeagueSharp.Common;

#endregion

namespace Marksman
{
    internal class Jinx : Champion
    {
        public Spell Q;
        public Spell E;
        public Spell R;
        public Spell W;
        private float QAddRange;

        public Jinx()
        {
            Utils.PrintMessage("Jinx loaded.");

            Q = new Spell(SpellSlot.Q, float.MaxValue);  
          
            W = new Spell(SpellSlot.W, 1500);
            W.SetSkillshot(0.6f, 60f, 2000f, true, Prediction.SkillshotType.SkillshotLine);

            E = new Spell(SpellSlot.E, 900);
            E.SetSkillshot(0.7f, 120f, 1750f, false, Prediction.SkillshotType.SkillshotCircle);

            R = new Spell(SpellSlot.R, 25000);
            R.SetSkillshot(0.6f, 140f, 1700f, false, Prediction.SkillshotType.SkillshotLine);
        }

        public override void Drawing_OnDraw(EventArgs args)
        {
            Spell[] spellList = { W };
            foreach (var spell in spellList)
            {
                var menuItem = GetValue<Circle>("Draw" + spell.Slot);
                if (menuItem.Active)
                    Utility.DrawCircle(ObjectManager.Player.Position, spell.Range, menuItem.Color);
            }
        }

        public override void Game_OnGameUpdate(EventArgs args)
        {   
            QAddRange = 50 + 25 * ObjectManager.Player.Spellbook.GetSpell(SpellSlot.Q).Level;

            var autoEi = GetValue<bool>("AutoEI");
            var autoEs = GetValue<bool>("AutoES");
            var autoEd = GetValue<bool>("AutoED");

            if (autoEs || autoEi || autoEd)
            {
                foreach (var enemy in ObjectManager.Get<Obj_AI_Hero>().Where(enemy => enemy.IsValidTarget(E.Range - 100)))
                {
                    if (autoEs && E.IsReady() && enemy.HasBuffOfType(BuffType.Slow))
                    {
                        var CastPosition = Prediction.GetBestPosition(enemy, 0.7f, 120f, 1750f, ObjectManager.Player.ServerPosition, 900f, false, Prediction.SkillshotType.SkillshotCircle, ObjectManager.Player.ServerPosition).CastPosition;
                        var SlowEndTime = GetSlowEndTime(enemy);

                        if (SlowEndTime >= (Game.Time + E.Delay + 0.5f))
                            E.Cast(CastPosition);
                    }   
                    if (autoEi && E.IsReady() && (enemy.HasBuffOfType(BuffType.Stun) || enemy.HasBuffOfType(BuffType.Snare)
                        || enemy.HasBuffOfType(BuffType.Charm) || enemy.HasBuffOfType(BuffType.Fear) || enemy.HasBuffOfType(BuffType.Taunt)))
                        E.CastIfHitchanceEquals(enemy, Prediction.HitChance.HighHitchance);
                    if (autoEd && E.IsReady() && enemy.IsDashing())
                        E.CastIfHitchanceEquals(enemy, Prediction.HitChance.Dashing);
                }
            }

            var castR = GetValue<KeyBind>("CastR").Active;

            if (castR && R.IsReady())
            {
                var target = SimpleTs.GetTarget(1500, SimpleTs.DamageType.Physical);

                if (target.IsValidTarget())
                    if (DamageLib.getDmg(target, DamageLib.SpellType.R, DamageLib.StageType.FirstDamage) > target.Health)
                        R.Cast(target, false, true);
            }

            var swapQ = GetValue<bool>("SwapQ");

            if (swapQ && LaneClearActive && HasFishBones())
                Q.Cast();

            if ((!ComboActive && !HarassActive) || !Orbwalking.CanMove(100))
                return;

            var useQ = GetValue<bool>("UseQ" + (ComboActive ? "C" : "H"));
            var useW = GetValue<bool>("UseW" + (ComboActive ? "C" : "H"));
            var useR = GetValue<bool>("UseRC");
            var checkROK = GetValue<bool>("ROverKill");

            if (useW && W.IsReady())
            {
                var t = SimpleTs.GetTarget(W.Range, SimpleTs.DamageType.Physical);

                if (t.IsValidTarget())
                    if(W.Cast(t) == Spell.CastStates.SuccessfullyCasted)
                        return;
            }

            if (useQ)
            {
                var t = SimpleTs.GetTarget(Q.Range, SimpleTs.DamageType.Physical);
                var swapDistance = GetValue<bool>("SwapDistance");
                var swapAOE = GetValue<bool>("SwapAOE");

                if (t.IsValidTarget())
                {
                    float Distance = t.ServerPosition.Distance(ObjectManager.Player.ServerPosition);
                    float PowPowRange = GetRealPowPowRange(t);

                    if (swapDistance && Q.IsReady())
                    {
                        if (Distance >= (PowPowRange - 50) && Distance < (PowPowRange + QAddRange + 50) && !HasFishBones())
                        {
                            if (Q.Cast())
                                return;
                        }
                        else if (Distance < (PowPowRange - 50) && HasFishBones() && (MoveStatus(t) == "towardme" || !t.IsMoving))
                        {
                            if (Q.Cast())
                                return;
                        }
                    }

                    if (swapAOE && Q.IsReady())
                    {
                        float PowPowStacks = GetPowPowStacks();

                        if (Distance < (PowPowRange + QAddRange + 50) && PowPowStacks > 2 && !HasFishBones() && CountEnemies(t, 150) > 1)
                            if(Q.Cast())
                                return;
                    }
                }
            }

            if (useR && R.IsReady())
            {
                var minR = GetValue<Slider>("MinRRange").Value;
                var maxR = GetValue<Slider>("MaxRRange").Value;
                var t = SimpleTs.GetTarget(maxR, SimpleTs.DamageType.Physical);

                if (t.IsValidTarget())
                {
                    float Distance = t.ServerPosition.Distance(ObjectManager.Player.ServerPosition);

                    if (!checkROK)
                    {
                        if (DamageLib.getDmg(t, DamageLib.SpellType.R, DamageLib.StageType.FirstDamage) > t.Health)
                            if(R.Cast(t, false, true) == Spell.CastStates.SuccessfullyCasted)
                                return;
                    }
                    else if (checkROK && Distance > minR)
                    {
                        var ADamage = DamageLib.getDmg(t, DamageLib.SpellType.AD);
                        var WDamage = DamageLib.getDmg(t, DamageLib.SpellType.W, DamageLib.StageType.FirstDamage);
                        var RDamage = DamageLib.getDmg(t, DamageLib.SpellType.R, DamageLib.StageType.FirstDamage);
                        float PowPowRange = GetRealPowPowRange(t);

                        if (Distance < (PowPowRange + QAddRange) && !(ADamage * 3.5 > t.Health))
                        {
                            if(!W.IsReady() || !(WDamage > t.Health) || W.GetPrediction(t).CollisionUnitsList.Count > 0)
                                if(CountAlliesNearTarget(t, 700) <= 2)
                                    if (RDamage > t.Health)
                                        if(R.Cast(t, false, true) == Spell.CastStates.SuccessfullyCasted)
                                            return;
                        }
                        else if(Distance > (PowPowRange + QAddRange))
                        {
                            if (!W.IsReady() || !(WDamage > t.Health) || Distance > W.Range || W.GetPrediction(t).CollisionUnitsList.Count > 0)
                                if (CountAlliesNearTarget(t, 700) <= 2)
                                    if (RDamage > t.Health)
                                        if(R.Cast(t, false, true) == Spell.CastStates.SuccessfullyCasted)
                                            return;
                        }
                    }
                }
            }
        }

        public override void Orbwalking_AfterAttack(Obj_AI_Base unit, Obj_AI_Base target)
        {
            if ((ComboActive || HarassActive) && unit.IsMe && (target is Obj_AI_Hero))
            {
                var useQ = GetValue<bool>("UseQ" + (ComboActive ? "C" : "H"));
                var useW = GetValue<bool>("UseW" + (ComboActive ? "C" : "H"));

                if (useW && W.IsReady())
                    W.Cast(target);

                if (useQ)
                {
                    var t = SimpleTs.GetTarget(Q.Range, SimpleTs.DamageType.Physical);
                    var swapDistance = GetValue<bool>("SwapDistance");
                    var swapAOE = GetValue<bool>("SwapAOE");

                    if (t.IsValidTarget())
                    {
                        float Distance = t.ServerPosition.Distance(ObjectManager.Player.ServerPosition);
                        float PowPowRange = GetRealPowPowRange(t);

                        if (swapDistance && Q.IsReady())
                        {
                            if (Distance >= (PowPowRange - 50) && Distance < (PowPowRange + QAddRange + 50) && !HasFishBones())
                            {
                                if (Q.Cast())
                                    return;
                            }
                            else if (Distance < (PowPowRange - 50) && HasFishBones() && (MoveStatus(t) == "towardme" || !t.IsMoving))
                            {
                                if (Q.Cast())
                                    return;
                            }
                        }

                        if (swapAOE && Q.IsReady())
                        {
                            float PowPowStacks = GetPowPowStacks();

                            if (Distance < (PowPowRange + QAddRange + 50) && PowPowStacks > 2 && !HasFishBones() && CountEnemies(t, 150) > 1)
                                if (Q.Cast())
                                    return;
                        }
                    }
                }
            }
        }

        private bool HasFishBones()
        {
            return ObjectManager.Player.AttackRange != 525;
        }

        private int CountEnemies(Obj_AI_Hero target, float range)
        {
            int n = 0;

            foreach (var hero in ObjectManager.Get<Obj_AI_Hero>()
                .Where(hero => hero.IsValidTarget() && hero.Team != ObjectManager.Player.Team && hero.ServerPosition.Distance(target.ServerPosition) <= range))
                n++;
            
            return n;
        }

        private int CountAlliesNearTarget(Obj_AI_Hero target, float range)
        {
            int n = 0;

            foreach (var hero in ObjectManager.Get<Obj_AI_Hero>()
                .Where(hero => hero.Team == ObjectManager.Player.Team && hero.ServerPosition.Distance(target.ServerPosition) <= range))
                n++;

            return n;
        }

        private int GetPowPowStacks()
        {
            int n = 0;

            foreach (var buff in ObjectManager.Player.Buffs)
                if (buff.DisplayName.ToLower() == "jinxqramp")
                    n = buff.Count;

            return n;
        }

        private float GetRealPowPowRange(Obj_AI_Hero target)
        {
            return 525 + ObjectManager.Player.BoundingRadius + target.BoundingRadius - ((target.Path.Length > 0) ? 20 : 10);
        }

        private float GetSlowEndTime(Obj_AI_Hero target)
        {
            float EndTime = 0f;

            foreach (var buff in target.Buffs)
                if (target.HasBuffOfType(BuffType.Slow))
                    EndTime = buff.EndTime;

            return EndTime;
        }

        private string MoveStatus(Obj_AI_Hero target)
        {
            var waypoints = target.GetWaypoints();
            float distanceFromWp, distanceFromTarget;

            distanceFromWp = waypoints.Last().To3D().Distance(ObjectManager.Player.ServerPosition);
            distanceFromTarget = target.ServerPosition.Distance(ObjectManager.Player.ServerPosition);

            if (distanceFromWp < distanceFromTarget)
                return "towardme";
            else if (distanceFromWp > distanceFromTarget)
                return "awayfromme";
            else return "standing";
        }

        public override void ComboMenu(Menu config)
        {
            config.AddItem(new MenuItem("UseQC" + Id, "Use Q").SetValue(true));
            config.AddItem(new MenuItem("UseWC" + Id, "Use W").SetValue(true));
            config.AddItem(new MenuItem("UseRC" + Id, "Use R").SetValue(true));
        }

        public override void HarassMenu(Menu config)
        {
            config.AddItem(new MenuItem("UseQH" + Id, "Use Q").SetValue(true));
            config.AddItem(new MenuItem("UseWH" + Id, "Use W").SetValue(false));
        }

        public override void LaneClearMenu(Menu config)
        {
            config.AddItem(new MenuItem("SwapQ" + Id, "Always swap to Minigun").SetValue(false));
        }

        public override void MiscMenu(Menu config)
        {
            config.AddItem(
                new MenuItem("CastR" + Id, "Cast R (2000 Range)").SetValue(new KeyBind("T".ToCharArray()[0],
                    KeyBindType.Press)));
            config.AddItem(new MenuItem("ROverKill" + Id, "Check R Overkill").SetValue(true));
            config.AddItem(new MenuItem("MinRRange" + Id, "Min R range").SetValue(new Slider(300, 0, 1500)));
            config.AddItem(new MenuItem("MaxRRange" + Id, "Max R range").SetValue(new Slider(1700, 0, 4000)));
            config.AddItem(new MenuItem("SwapDistance" + Id, "Swap Q for distance").SetValue(true));
            config.AddItem(new MenuItem("SwapAOE" + Id, "Swap Q for AOE").SetValue(false));
            config.AddItem(new MenuItem("AutoEI" + Id, "Auto-E on immobile").SetValue(true));
            config.AddItem(new MenuItem("AutoES" + Id, "Auto-E on slowed").SetValue(true));
            config.AddItem(new MenuItem("AutoED" + Id, "Auto-E on dashing").SetValue(true));
        }

        public override void DrawingMenu(Menu config)
        {
            config.AddItem(
                new MenuItem("DrawW" + Id, "W range").SetValue(new Circle(false, Color.FromArgb(100, 255, 255, 255))));
        }
    }
}
