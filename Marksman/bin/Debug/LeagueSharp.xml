<?xml version="1.0"?>
<doc>
    <assembly>
        "LeagueSharp"
    </assembly>
    <members>
        <member name="E:LeagueSharp.Drawing.OnSetRenderTarget">
            <summary>
SetRenderTarget Event, called before D3D9.SetRenderTarget is called
</summary>
        </member>
        <member name="E:LeagueSharp.Drawing.OnPresent">
            <summary>
Present Event, called before D3D9.Present is called
</summary>
        </member>
        <member name="E:LeagueSharp.Drawing.OnPostReset">
            <summary>
PostReset Event, called after Reset is called.
</summary>
        </member>
        <member name="E:LeagueSharp.Drawing.OnPreReset">
            <summary>
PreReset Event, called before Reset is called.
</summary>
        </member>
        <member name="E:LeagueSharp.Drawing.OnEndScene">
            <summary>
EndScene Event, subscribe to this event for using DirectX rendering code
</summary>
        </member>
        <member name="E:LeagueSharp.Drawing.OnBeginScene">
            <summary>
BeginScene Event
</summary>
        </member>
        <member name="P:LeagueSharp.Drawing.View">
            <summary>
Game camera's view
</summary>
        </member>
        <member name="P:LeagueSharp.Drawing.Projection">
            <summary>
Game camera's Projection
</summary>
        </member>
        <member name="P:LeagueSharp.Drawing.Direct3DDevice">
            <summary>
SharpDX DirectD3D9 Device
</summary>
        </member>
        <member name="P:LeagueSharp.Drawing.Height">
            <summary>
Screen height of the League of Legends window
</summary>
        </member>
        <member name="P:LeagueSharp.Drawing.Width">
            <summary>
Screen width of the League of Legends window
</summary>
        </member>
        <member name="M:LeagueSharp.Drawing.ScreenToWorld(System.Single,System.Single)">
            <summary>
Converts the given screen coordinates into 3D world coordinates.
</summary>
        </member>
        <member name="M:LeagueSharp.Drawing.WorldToScreen(SharpDX.Vector3)">
            <summary>
Converts the given 3D world coordinates into screen coordinates.
</summary>
        </member>
        <member name="M:LeagueSharp.Drawing.WorldToMinimap(SharpDX.Vector3)">
            <summary>
Converts the given 3D world coordinates into minimap coordinates.
</summary>
        </member>
        <member name="M:LeagueSharp.Drawing.GetTextExtent(System.String)">
            <summary>
Retrieves the text extent
</summary>
        </member>
        <member name="M:LeagueSharp.Drawing.DrawLine(System.Single,System.Single,System.Single,System.Single,System.Single,System.Drawing.Color)">
            <summary>
Draws a line on the screen with specified thickness and color
</summary>
        </member>
        <member name="M:LeagueSharp.Drawing.DrawCircle(SharpDX.Vector3,System.Single,System.Drawing.Color)">
            <summary>
Draws a circle at the given 3D position with the given radius in the specified color.
</summary>
        </member>
        <member name="M:LeagueSharp.Drawing.DrawText(System.Single,System.Single,System.Drawing.Color,System.String)">
            <summary>
Draws Text on the Screen.
</summary>
        </member>
        <member name="M:LeagueSharp.Drawing.DrawText(System.Single,System.Single,System.Drawing.Color,System.String,System.Object[])">
            <summary>
Draws Text on the Screen.
</summary>
        </member>
        <member name="E:LeagueSharp.Drawing.OnDraw">
            <summary>
Subscribe to this event to make use of drawing functions. 
</summary>
        </member>
        <member name="T:LeagueSharp.Drawing">
            <summary>
This class offers everything one needs to render ontop of the League of Legends window.
</summary>
        </member>
        <member name="P:LeagueSharp.Game.IP">
            <summary>
Returns the gameserver port.
</summary>
        </member>
        <member name="P:LeagueSharp.Game.Port">
            <summary>
Returns the gameserver port.
</summary>
        </member>
        <member name="P:LeagueSharp.Game.Ping">
            <summary>
Returns the ping.
</summary>
        </member>
        <member name="P:LeagueSharp.Game.CursorPos">
            <summary>
Returns the 3D cursor position.
</summary>
        </member>
        <member name="P:LeagueSharp.Game.Mode">
            <summary>
Returns the current game mode.
</summary>
        </member>
        <member name="P:LeagueSharp.Game.Time">
            <summary>
Returns the ingame time.
</summary>
        </member>
        <member name="E:LeagueSharp.Game.OnGameInput">
            <summary>
This event is fired when trying to use the chat input.
</summary>
        </member>
        <member name="E:LeagueSharp.Game.OnGameNotifyEvent">
            <summary>
This event is fired when the game ends
</summary>
        </member>
        <member name="E:LeagueSharp.Game.OnGameEnd">
            <summary>
This event is fired when the game ends
</summary>
        </member>
        <member name="E:LeagueSharp.Game.OnGameStart">
            <summary>
This event is fired when the game starts
</summary>
        </member>
        <member name="E:LeagueSharp.Game.OnGameSendPacket">
            <summary>
This event is fired every a packet is about to be sent
</summary>
        </member>
        <member name="E:LeagueSharp.Game.OnGameProcessPacket">
            <summary>
This event is fired every a packet is received and about to be processed by LoL
</summary>
        </member>
        <member name="E:LeagueSharp.Game.OnGameUpdate">
            <summary>
This event is fired every time the game updates.
</summary>
        </member>
        <member name="E:LeagueSharp.Game.OnWndProc">
            <summary>
This event is fired when a window event is being processed. To prevent the game from processing
a event, you can set process to false. <see cref="T:LeagueSharp.WndEventArgs" />.
</summary>
        </member>
        <member name="M:LeagueSharp.Game.LineOfSightTest(SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
Checks if you have line of sight from A to B
</summary>
        </member>
        <member name="M:LeagueSharp.Game.Say(System.String)">
            <summary>
Executes a chat command
</summary>
        </member>
        <member name="M:LeagueSharp.Game.Say(System.String,System.Object[])">
            <summary>
Executes a chat command
</summary>
        </member>
        <member name="M:LeagueSharp.Game.PrintChat(System.String,System.Object[])">
            <summary>
Prints text into the game chat
</summary>
        </member>
        <member name="M:LeagueSharp.Game.PrintChat(System.String)">
            <summary>
Prints text into the game chat
</summary>
        </member>
        <member name="T:LeagueSharp.Game">
            <summary>
This class offers game relevant stuff 
</summary>
        </member>
        <member name="P:LeagueSharp.BuffInstance.Name">
            <summary>
Gets the internal name of the buff
</summary>
        </member>
        <member name="P:LeagueSharp.BuffInstance.DisplayName">
            <summary>
Gets the display name of the buff, e.g. for tooltips
</summary>
        </member>
        <member name="P:LeagueSharp.BuffInstance.EndTime">
            <summary>
Gets the time when the buff will run out
</summary>
        </member>
        <member name="P:LeagueSharp.BuffInstance.StartTime">
            <summary>
Returns the starting time of the buff.
</summary>
        </member>
        <member name="P:LeagueSharp.BuffInstance.IsPositive">
            <summary>
Returns true if the buff is having positive effect
</summary>
        </member>
        <member name="P:LeagueSharp.BuffInstance.IsActive">
            <summary>
Returns true if a buff is still active
</summary>
        </member>
        <member name="P:LeagueSharp.BuffInstance.Count">
            <summary>
Gets the stack count
</summary>
        </member>
        <member name="P:LeagueSharp.BuffInstance.Type">
            <summary>
Gets the type of the Buff
</summary>
        </member>
        <member name="T:LeagueSharp.BuffInstance">
            <summary>
Defines a BuffInstance
</summary>
        </member>
        <member name="T:LeagueSharp.BuffInstanceNotFoundException">
            <summary>
This exception is thrown when a BuffInstance object can no longer be located in memory.
</summary>
        </member>
        <member name="T:LeagueSharp.BuffType">
            <summary>
Every buff can be grouped into a certain type. This enum defines these.
</summary>
        </member>
        <member name="T:LeagueSharp.SpellData">
            <summary>
This class defines static information on a given spell. This information usually doesn't change as the game progresses.
Use this for spellshot calculations and so on.
</summary>
        </member>
        <member name="P:LeagueSharp.SpellDataInst.ToggleState">
            <summary>
Gets current spell toggle state.
</summary>
        </member>
        <member name="P:LeagueSharp.SpellDataInst.Cooldown">
            <summary>
Gets current spell cooldown.
</summary>
        </member>
        <member name="P:LeagueSharp.SpellDataInst.CooldownExpires">
            <summary>
Gets when the cooldown on the spell expires.
</summary>
        </member>
        <member name="P:LeagueSharp.SpellDataInst.Level">
            <summary>
Gets the current Level of the spell
</summary>
        </member>
        <member name="T:LeagueSharp.SpellDataInst">
            <summary>
This class defines the SpellDataInst which you can pull from a <see cref="T:LeagueSharp.Spellbook" />.
</summary>
        </member>
        <member name="T:LeagueSharp.SpellDataInstNotFoundException">
            <summary>
This exception is thrown when a SpellDataInst object can no longer be located in memory.
</summary>
        </member>
        <member name="T:LeagueSharp.SpellFlags">
            <summary>
Spells can have different flags. This enum defines those.
</summary>
        </member>
        <member name="M:LeagueSharp.Spellbook.CastSpell(LeagueSharp.SpellSlot)">
            <summary>
Casts a spell
</summary>
        </member>
        <member name="M:LeagueSharp.Spellbook.CastSpell(LeagueSharp.SpellSlot,LeagueSharp.GameObject)">
            <summary>
Casts a spell on the given unit
</summary>
        </member>
        <member name="M:LeagueSharp.Spellbook.CastSpell(LeagueSharp.SpellSlot,SharpDX.Vector3)">
            <summary>
Casts a spell at the given position
</summary>
        </member>
        <member name="M:LeagueSharp.Spellbook.CanUseSpell(LeagueSharp.SpellSlot)">
            <summary>
Gets the <see cref="T:LeagueSharp.SpellState" /> of the given spellslot.
</summary>
            <returns>The <see cref="T:LeagueSharp.SpellState" /> of the given spellslot. </returns>
        </member>
        <member name="M:LeagueSharp.Spellbook.GetManaCost(LeagueSharp.SpellSlot)">
            <summary>
Gets the mana cost of the given spellslot.
</summary>
            <returns>The mana cost of the given spellslot </returns>
        </member>
        <member name="M:LeagueSharp.Spellbook.GetSpell(LeagueSharp.SpellSlot)">
            <summary>
Gets a specified Spell
</summary>
        </member>
        <member name="P:LeagueSharp.Spellbook.Spells">
            <summary>
Gets a array of all Spells defined in the Spellbook
</summary>
        </member>
        <member name="P:LeagueSharp.Spellbook.ActiveSpellSlot">
            <summary>
Gets the active spell
</summary>
        </member>
        <member name="P:LeagueSharp.Spellbook.SelectedSpellSlot">
            <summary>
Gets the selected spell
</summary>
        </member>
        <member name="P:LeagueSharp.Spellbook.IsCastingSpell">
            <summary>
Gets if a spell is being casted currently.
</summary>
        </member>
        <member name="P:LeagueSharp.Spellbook.IsSummonerSpellbook">
            <summary>
Gets whether the spellbook is a summoner spellbook or not.
</summary>
        </member>
        <member name="T:LeagueSharp.Spellbook">
            <summary>
This class represents a spellbook of a LoL unit.
</summary>
        </member>
        <member name="T:LeagueSharp.SpellbookNotFoundException">
            <summary>
This exception is thrown when a Spellbook object can no longer be located in memory.
</summary>
        </member>
        <member name="T:LeagueSharp.SpellState">
            <summary>
This enum defines the different states a <see cref="T:LeagueSharp.SpellDataInst" /> can have.
</summary>
        </member>
        <member name="P:LeagueSharp.MenuGUI.IsChatOpen">
            <summary>
Returns whether the chat is open.
</summary>
        </member>
        <member name="T:LeagueSharp.MenuGUI">
            <summary>
This class contains information and functions regarding screen ui stuff.
</summary>
        </member>
        <member name="T:LeagueSharp.Mastery">
            <summary>
This structure represents a mastery entry.
</summary>
        </member>
    </members>
</doc>